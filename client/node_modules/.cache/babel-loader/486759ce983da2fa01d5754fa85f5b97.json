{"ast":null,"code":"var _jsxFileName = \"/Users/sristichowdhury/Desktop/bwHacks/client/src/components/camera-feed.jsx\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './cameraStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class CameraFeed extends Component {\n  constructor(...args) {\n    super(...args);\n    this.val = '';\n\n    this.takePhoto = () => {\n      const {\n        sendFile\n      } = this.props;\n      const context = this.canvas.getContext('2d');\n      context.drawImage(this.videoPlayer, 0, 0, 280, 260);\n      this.canvas.toBlob(sendFile); // oCtx.drawImage(oColorImg, 0, 0);\n\n      var oImgData = context.getImageData(0, 0, 280, 260);\n      context.putImageData(oImgData, 0, 0);\n      var oGrayImg = new Image();\n      oGrayImg.src = this.canvas.toDataURL();\n      let base64ToString = Buffer.from(base64data, \"base64\").toString();\n      this.setState({\n        data: base64ToString\n      });\n      console.log(oGrayImg);\n      fetch('https://speakupgenderapi.herokuapp.com/predict_api', {\n        mode: 'no-cors',\n        method: 'post',\n        body: JSON.stringify({\n          file: oGrayImg.src\n        })\n      }) // .then(res=>res.json()).\n      .then(res => console.log(res)).catch(err => console.log(err));\n    };\n\n    this.downloadCanvas = () => {\n      let link = document.createElement(\"a\");\n      link.download = \"image.png\";\n      this.canvas.toBlob(function (blob) {\n        link.href = URL.createObjectURL(blob); // link.click();\n      });\n    };\n  }\n\n  processDevices(devices) {\n    devices.forEach(device => {\n      // console.log(device.label);\n      this.setDevice(device);\n    });\n  }\n  /**\n   * Sets the active device and starts playing the feed\n   * @memberof CameraFeed\n   * @instance\n   */\n\n\n  async setDevice(device) {\n    const {\n      deviceId\n    } = device;\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: {\n        deviceId\n      }\n    });\n    this.videoPlayer.srcObject = stream;\n    this.videoPlayer.play();\n  }\n  /**\n   * On mount, grab the users connected devices and process them\n   * @memberof CameraFeed\n   * @instance\n   * @override\n   */\n\n\n  async componentDidMount() {\n    const cameras = await navigator.mediaDevices.enumerateDevices();\n    this.processDevices(cameras);\n  }\n  /**\n   * Handles taking a still image from the video feed on the camera\n   * @memberof CameraFeed\n   * @instance\n   */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"c-camera-feed\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"c-camera-feed__viewer\",\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: ref => this.videoPlayer = ref,\n          width: \"280\",\n          heigh: \"260\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.takePhoto,\n        children: \"Take photo!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"c-camera-feed__stage\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          width: \"280\",\n          height: \"260\",\n          ref: ref => this.canvas = ref\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.downloadCanvas,\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/sristichowdhury/Desktop/bwHacks/client/src/components/camera-feed.jsx"],"names":["React","Component","Link","CameraFeed","val","takePhoto","sendFile","props","context","canvas","getContext","drawImage","videoPlayer","toBlob","oImgData","getImageData","putImageData","oGrayImg","Image","src","toDataURL","base64ToString","Buffer","from","base64data","toString","setState","data","console","log","fetch","mode","method","body","JSON","stringify","file","then","res","catch","err","downloadCanvas","link","document","createElement","download","blob","href","URL","createObjectURL","processDevices","devices","forEach","device","setDevice","deviceId","stream","navigator","mediaDevices","getUserMedia","audio","video","srcObject","play","componentDidMount","cameras","enumerateDevices","render","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './cameraStyles.css'\n\n\n\nexport class CameraFeed extends Component {\n    /**\n     * Processes available devices and identifies one by the label\n     * @memberof CameraFeed\n     * @instance\n     */\n\n\n    val=''\n\n    processDevices(devices) {\n        devices.forEach(device => {\n            // console.log(device.label);\n            this.setDevice(device);\n        });\n    }\n\n    /**\n     * Sets the active device and starts playing the feed\n     * @memberof CameraFeed\n     * @instance\n     */\n    async setDevice(device) {\n        const { deviceId } = device;\n        const stream = await navigator.mediaDevices.getUserMedia(\n            { audio: false, video: { deviceId } });\n        this.videoPlayer.srcObject = stream;\n        this.videoPlayer.play();\n    }\n\n    /**\n     * On mount, grab the users connected devices and process them\n     * @memberof CameraFeed\n     * @instance\n     * @override\n     */\n    async componentDidMount() {\n        const cameras = await navigator.mediaDevices.enumerateDevices();\n        this.processDevices(cameras);\n    }\n\n    /**\n     * Handles taking a still image from the video feed on the camera\n     * @memberof CameraFeed\n     * @instance\n     */\n\n    takePhoto = () => {\n        const { sendFile } = this.props;\n        const context = this.canvas.getContext('2d');\n        context.drawImage(this.videoPlayer, 0, 0, 280, 260);\n        this.canvas.toBlob(sendFile);\n        // oCtx.drawImage(oColorImg, 0, 0);\n        var oImgData = context.getImageData(0, 0, 280, 260);\n        context.putImageData(oImgData, 0, 0);\n        var oGrayImg = new Image();\n        oGrayImg.src = this.canvas.toDataURL();\n        let base64ToString = Buffer.from(base64data, \"base64\").toString()\n        this.setState({data: base64ToString })\n        console.log(oGrayImg)\n\n\n\n        fetch('https://speakupgenderapi.herokuapp.com/predict_api',\n        {\n            mode: 'no-cors',\n            method:'post',\n            body:JSON.stringify({file:oGrayImg.src})\n        })\n        // .then(res=>res.json()).\n        .then(res=>console.log(res)).\n        catch(err=>console.log(err))\n    }\n\n    downloadCanvas = ()=> {\n\n        let link = document.createElement(\"a\");\n        link.download = \"image.png\";\n        this.canvas.toBlob(function(blob) {\n        link.href = URL.createObjectURL(blob);\n        // link.click();\n        },);\n\n        }\n\n    \n    render() {\n        return (\n            <div className=\"c-camera-feed\">\n                <div className=\"c-camera-feed__viewer\">\n                    <video ref={ref => (this.videoPlayer = ref)}\n                     width=\"280\" heigh=\"260\" />\n                </div>\n                <button onClick={this.takePhoto}>Take photo!</button>\n                <div className=\"c-camera-feed__stage\">\n                    <canvas width=\"280\" height=\"260\"ref={ref => (this.canvas = ref)\n                        }\n                         />\n                </div>\n                <button onClick={this.downloadCanvas}>Download</button>\n                {/* <a href={this.state.val}>Link</a> */}\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}