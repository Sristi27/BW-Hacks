{"ast":null,"code":"var _jsxFileName = \"/Users/sristichowdhury/Desktop/bwHacks/client/src/components/camera-feed.jsx\";\nimport React, { Component } from 'react';\nimport './cameraStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class CameraFeed extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.takePhoto = () => {\n      const {\n        sendFile\n      } = this.props;\n      const context = this.canvas.getContext('2d');\n      context.drawImage(this.videoPlayer, 0, 0, 280, 260);\n      this.canvas.toBlob(sendFile); // console.log(this.canvas.toBlob(sendFile))\n    };\n\n    this.downloadCanvas = canvas => {\n      console.log(\"hello\");\n      console.log(canvas); // link.href = this.canvas.toDataURL();\n      // link.download = filename;\n      // console.log(link)\n    };\n  }\n\n  /**\n   * Processes available devices and identifies one by the label\n   * @memberof CameraFeed\n   * @instance\n   */\n  processDevices(devices) {\n    devices.forEach(device => {\n      // console.log(device.label);\n      this.setDevice(device);\n    });\n  }\n  /**\n   * Sets the active device and starts playing the feed\n   * @memberof CameraFeed\n   * @instance\n   */\n\n\n  async setDevice(device) {\n    const {\n      deviceId\n    } = device;\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: {\n        deviceId\n      }\n    });\n    this.videoPlayer.srcObject = stream;\n    this.videoPlayer.play();\n  }\n  /**\n   * On mount, grab the users connected devices and process them\n   * @memberof CameraFeed\n   * @instance\n   * @override\n   */\n\n\n  async componentDidMount() {\n    const cameras = await navigator.mediaDevices.enumerateDevices();\n    this.processDevices(cameras);\n  }\n  /**\n   * Handles taking a still image from the video feed on the camera\n   * @memberof CameraFeed\n   * @instance\n   */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"c-camera-feed\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"c-camera-feed__viewer\",\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: ref => this.videoPlayer = ref,\n          width: \"280\",\n          heigh: \"260\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.takePhoto,\n        children: \"Take photo!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"c-camera-feed__stage\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          width: \"280\",\n          height: \"260\",\n          ref: ref => this.canvas = ref\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.downloadCanvas(this.canvas),\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/sristichowdhury/Desktop/bwHacks/client/src/components/camera-feed.jsx"],"names":["React","Component","CameraFeed","takePhoto","sendFile","props","context","canvas","getContext","drawImage","videoPlayer","toBlob","downloadCanvas","console","log","processDevices","devices","forEach","device","setDevice","deviceId","stream","navigator","mediaDevices","getUserMedia","audio","video","srcObject","play","componentDidMount","cameras","enumerateDevices","render","ref"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,oBAAP;;AAIA,OAAO,MAAMC,UAAN,SAAyBD,SAAzB,CAAmC;AAAA;AAAA;;AAAA,SA0CtCE,SA1CsC,GA0C1B,MAAM;AACd,YAAM;AAAEC,QAAAA;AAAF,UAAe,KAAKC,KAA1B;AACA,YAAMC,OAAO,GAAG,KAAKC,MAAL,CAAYC,UAAZ,CAAuB,IAAvB,CAAhB;AACAF,MAAAA,OAAO,CAACG,SAAR,CAAkB,KAAKC,WAAvB,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,GAA1C,EAA+C,GAA/C;AACA,WAAKH,MAAL,CAAYI,MAAZ,CAAmBP,QAAnB,EAJc,CAKd;AACH,KAhDqC;;AAAA,SAkDtCQ,cAlDsC,GAkDpBL,MAAD,IAAW;AACxBM,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ,EAFwB,CAGxB;AACA;AACA;AACC,KAxDiC;AAAA;;AACtC;AACJ;AACA;AACA;AACA;AACIQ,EAAAA,cAAc,CAACC,OAAD,EAAU;AACpBA,IAAAA,OAAO,CAACC,OAAR,CAAgBC,MAAM,IAAI;AACtB;AACA,WAAKC,SAAL,CAAeD,MAAf;AACH,KAHD;AAIH;AAED;AACJ;AACA;AACA;AACA;;;AACmB,QAATC,SAAS,CAACD,MAAD,EAAS;AACpB,UAAM;AAAEE,MAAAA;AAAF,QAAeF,MAArB;AACA,UAAMG,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CACjB;AAAEC,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,KAAK,EAAE;AAAEN,QAAAA;AAAF;AAAvB,KADiB,CAArB;AAEA,SAAKV,WAAL,CAAiBiB,SAAjB,GAA6BN,MAA7B;AACA,SAAKX,WAAL,CAAiBkB,IAAjB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AAC2B,QAAjBC,iBAAiB,GAAG;AACtB,UAAMC,OAAO,GAAG,MAAMR,SAAS,CAACC,YAAV,CAAuBQ,gBAAvB,EAAtB;AACA,SAAKhB,cAAL,CAAoBe,OAApB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AAkBIE,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,+BACI;AAAO,UAAA,GAAG,EAAEC,GAAG,IAAK,KAAKvB,WAAL,GAAmBuB,GAAvC;AACC,UAAA,KAAK,EAAC,KADP;AACa,UAAA,KAAK,EAAC;AADnB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAQ,QAAA,OAAO,EAAE,KAAK9B,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,+BACI;AAAQ,UAAA,KAAK,EAAC,KAAd;AAAoB,UAAA,MAAM,EAAC,KAA3B;AAAgC,UAAA,GAAG,EAAE8B,GAAG,IAAK,KAAK1B,MAAL,GAAc0B;AAA3D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cANJ,eAWI;AAAS,QAAA,OAAO,EAAE,KAAKrB,cAAL,CAAoB,KAAKL,MAAzB,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAeH;;AA3EqC","sourcesContent":["import React, { Component } from 'react';\nimport './cameraStyles.css'\n\n\n\nexport class CameraFeed extends Component {\n    /**\n     * Processes available devices and identifies one by the label\n     * @memberof CameraFeed\n     * @instance\n     */\n    processDevices(devices) {\n        devices.forEach(device => {\n            // console.log(device.label);\n            this.setDevice(device);\n        });\n    }\n\n    /**\n     * Sets the active device and starts playing the feed\n     * @memberof CameraFeed\n     * @instance\n     */\n    async setDevice(device) {\n        const { deviceId } = device;\n        const stream = await navigator.mediaDevices.getUserMedia(\n            { audio: false, video: { deviceId } });\n        this.videoPlayer.srcObject = stream;\n        this.videoPlayer.play();\n    }\n\n    /**\n     * On mount, grab the users connected devices and process them\n     * @memberof CameraFeed\n     * @instance\n     * @override\n     */\n    async componentDidMount() {\n        const cameras = await navigator.mediaDevices.enumerateDevices();\n        this.processDevices(cameras);\n    }\n\n    /**\n     * Handles taking a still image from the video feed on the camera\n     * @memberof CameraFeed\n     * @instance\n     */\n    takePhoto = () => {\n        const { sendFile } = this.props;\n        const context = this.canvas.getContext('2d');\n        context.drawImage(this.videoPlayer, 0, 0, 280, 260);\n        this.canvas.toBlob(sendFile);\n        // console.log(this.canvas.toBlob(sendFile))\n    };\n\n    downloadCanvas = (canvas)=> {\n        console.log(\"hello\")\n        console.log(canvas)\n        // link.href = this.canvas.toDataURL();\n        // link.download = filename;\n        // console.log(link)\n        }\n\n    \n    render() {\n        return (\n            <div className=\"c-camera-feed\">\n                <div className=\"c-camera-feed__viewer\">\n                    <video ref={ref => (this.videoPlayer = ref)}\n                     width=\"280\" heigh=\"260\" />\n                </div>\n                <button onClick={this.takePhoto}>Take photo!</button>\n                <div className=\"c-camera-feed__stage\">\n                    <canvas width=\"280\" height=\"260\"ref={ref => (this.canvas = ref)\n                        }\n                         />\n                </div>\n                <button  onClick={this.downloadCanvas(this.canvas)}>Download</button>\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}